{
  "name": "Master Social Scraper (Google Sheets)",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        200,
        40
      ],
      "id": "8530df80-300b-487d-8b5f-82d2507ce5e2",
      "name": "When chat message received",
      "webhookId": "f87d70e5-6eed-4335-9ab6-0661150de37d"
    },
    {
      "parameters": {
        "inputText": "=Identify the category based on the input URL\n {{ $json.chatInput }}",
        "categories": {
          "categories": [
            {
              "category": "LinkedIn",
              "description": "for URLs containing `linkedin.com`"
            },
            {
              "category": "YouTube",
              "description": "for URLs containing `youtube.com` or `youtu.be`"
            },
            {
              "category": "Instagram",
              "description": "for URLs containing `instagram.com`"
            },
            {
              "category": "X",
              "description": "for URLs containing `x.com` or `twitter.com` "
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        420,
        40
      ],
      "id": "1b0d5e0a-2bda-4f22-a514-08df5f2abd2e",
      "name": "Text Classifier"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        400,
        220
      ],
      "id": "aa8f826c-7cdc-4f36-96c1-61f34589d234",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "LCQSyEofGMlre7us",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/h7sDV53CddomktSi5/run-sync-get-dataset-items",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer apify_api_TZIb2yKKetN4gclE8oTTpB4tfKNEc4250Rs6"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"downloadSubtitles\": false,\n  \"hasCC\": false,\n  \"hasLocation\": false,\n  \"hasSubtitles\": false,\n  \"is360\": false,\n  \"is3D\": false,\n  \"is4K\": false,\n  \"isBought\": false,\n  \"isHD\": false,\n  \"isHDR\": false,\n  \"isLive\": false,\n  \"isVR180\": false,\n  \"maxResultStreams\": 0,\n  \"maxResults\": 10,\n  \"maxResultsShorts\": 0,\n  \"preferAutoGeneratedSubtitles\": false,\n  \"saveSubsToKVS\": false,\n  \"sortVideosBy\": \"POPULAR\",\n  \"startUrls\": [\n    {\n      \"url\": \"{{ $json.chatInput }}\",\n      \"method\": \"GET\"\n    }\n  ]\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        -60
      ],
      "id": "a2a7764c-7f5f-4eee-a857-8f3fd9a32f2b",
      "name": "YouTube Scraper"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/nfp1fpt5gUlBwPcor/run-sync-get-dataset-items",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer apify_api_TZIb2yKKetN4gclE8oTTpB4tfKNEc4250Rs6"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"maxItems\": 20,\n  \"sort\": \"Latest\",\n  \"startUrls\": [\n    \"{{ $json.chatInput }}\"\n  ]\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        440
      ],
      "id": "5ebb9aad-b8cc-4d6b-91ef-021f0f4a23ef",
      "name": "X Scraper"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/LQQIXN9Othf8f7R5n/run-sync-get-dataset-items",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer apify_api_TZIb2yKKetN4gclE8oTTpB4tfKNEc4250Rs6"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "={{ 20 }}"
            },
            {
              "name": "username",
              "value": "={{ $json.chatInput }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        -320
      ],
      "id": "2eb5ecc6-47e2-4334-8fa7-525da6b9795f",
      "name": "LinkedIn Scraper"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/xMc5Ga1oCONPmWJIa/run-sync-get-dataset-items",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer apify_api_TZIb2yKKetN4gclE8oTTpB4tfKNEc4250Rs6"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"resultsLimit\": 30,\n    \"username\": [\n        \"{{ $json.chatInput }}\"\n    ]\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        220
      ],
      "id": "01c23d5f-4993-4b2d-8791-245871e3293d",
      "name": "Instagram Reel Scraper"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1260,
        860
      ],
      "id": "24a17aac-8e04-4b8d-a392-8733185e8ce5",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "LCQSyEofGMlre7us",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0a63e659-ce95-42b4-b147-82ce3e8c041c",
              "name": "Transcript",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1460,
        860
      ],
      "id": "37d505fb-cb81-4d86-8bad-cb7be5ab290c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        820,
        860
      ],
      "id": "a89f0c64-de10-4b59-bbdc-e7713b85647e",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "url",
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input2",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1420,
        200
      ],
      "id": "868b218d-d60a-4b90-b419-2d206f6f53b1",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0a63e659-ce95-42b4-b147-82ce3e8c041c",
              "name": "Transcript",
              "value": "={{ $json.message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1580,
        1280
      ],
      "id": "54902779-ebdf-416f-83a6-7962f5bafbc1",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        760,
        1260
      ],
      "id": "1bc8c908-07c6-4349-a4b7-e75998158fb2",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "url",
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input2",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1420,
        -80
      ],
      "id": "819c250b-18e6-4cf8-890f-fcaba3446d4e",
      "name": "Merge1"
    },
    {
      "parameters": {
        "content": "## IG Reels Transcript\nThis flow is triggered on the appended records from the initial scrape. It then transcribes the IG reels, updates the Google Sheets Row, and then loops until all records have been updated",
        "height": 380,
        "width": 1780
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        140,
        740
      ],
      "typeVersion": 1,
      "id": "6b968610-8fc7-4824-8b37-858360992483",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## YT Long Transcript\nThis flow is triggered on the appended records from the initial scrape. It then transcribes the youtube long-form content, updates the Google Sheets row, and then loops until all records have been updated",
        "height": 380,
        "width": 1780
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        140,
        1160
      ],
      "typeVersion": 1,
      "id": "56772fdd-7b0e-425a-9399-cb878d310c25",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "url",
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input2",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1420,
        420
      ],
      "id": "4cfcecf7-ffae-4a8a-9fb2-3907b9d98b59",
      "name": "Merge2"
    },
    {
      "parameters": {
        "content": "## Social profile/channel scraper\nThis workflow is triggered by a chat input. The user submits the url of a profile or \nchannel of a respective social media, and the workflow takes it from there.",
        "height": 1140,
        "width": 1780,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        140,
        -460
      ],
      "typeVersion": 1,
      "id": "85070679-d8b7-4a67-8cb5-a04e96766b21",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "url",
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input2",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1420,
        -340
      ],
      "id": "d7cffebc-cc39-4966-86d7-014b1190b891",
      "name": "Merge3"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1130347352,
          "mode": "list",
          "cachedResultName": "IG Reels Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1130347352"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "url": "={{ $json.url }}",
            "videoUrl": "={{ $json.videoUrl }}",
            "videoViewCount": "={{ $json.videoViewCount }}",
            "timestamp": "={{ $json.timestamp }}",
            "hashtags/0": "={{ $json.hashtags[0] }}",
            "hashtags/1": "={{ $json.hashtags[1] }}",
            "hashtags/2": "={{ $json.hashtags[2] }}",
            "hashtags/3": "={{ $json.hashtags[3] }}",
            "hashtags/4": "={{ $json.hashtags[4] }}",
            "hashtags/5": "={{ $json.hashtags[5] }}",
            "hashtags/6": "={{ $json.hashtags[6] }}",
            "hashtags/7": "={{ $json.hashtags[7] }}",
            "hashtags/8": "={{ $json.hashtags[8] }}",
            "hashtags/9": "={{ $json.hashtags[9] }}",
            "hashtags/10": "={{ $json.hashtags[10] }}",
            "hashtags/11": "={{ $json.hashtags[11] }}",
            "hashtags/12": "={{ $json.hashtags[12] }}",
            "hashtags/13": "={{ $json.hashtags[13] }}",
            "hashtags/14": "={{ $json.hashtags[14] }}",
            "hashtags/15": "={{ $json.hashtags[15] }}",
            "videoDuration": "={{ $json.videoDuration }}",
            "commentsCount": "={{ $json.commentsCount }}",
            "likesCount": "={{ $json.likesCount }}",
            "caption": "={{ $json.caption }}",
            "ownerUsername": "={{ $json.ownerUsername }}",
            "Created": "={{  $now }}"
          },
          "matchingColumns": [
            "url"
          ],
          "schema": [
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Created",
              "displayName": "Created",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Used",
              "displayName": "Used",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ownerUsername",
              "displayName": "ownerUsername",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "videoUrl",
              "displayName": "videoUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Transcript",
              "displayName": "Transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "caption",
              "displayName": "caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likesCount",
              "displayName": "likesCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/0",
              "displayName": "hashtags/0",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/1",
              "displayName": "hashtags/1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/2",
              "displayName": "hashtags/2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/3",
              "displayName": "hashtags/3",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/4",
              "displayName": "hashtags/4",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/5",
              "displayName": "hashtags/5",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/6",
              "displayName": "hashtags/6",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/7",
              "displayName": "hashtags/7",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/8",
              "displayName": "hashtags/8",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/9",
              "displayName": "hashtags/9",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/10",
              "displayName": "hashtags/10",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/11",
              "displayName": "hashtags/11",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/12",
              "displayName": "hashtags/12",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/13",
              "displayName": "hashtags/13",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/14",
              "displayName": "hashtags/14",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hashtags/15",
              "displayName": "hashtags/15",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "videoViewCount",
              "displayName": "videoViewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "videoDuration",
              "displayName": "videoDuration",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "commentsCount",
              "displayName": "commentsCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1640,
        200
      ],
      "id": "165d92d5-5755-4cfb-bde1-30fe8bb53412",
      "name": "Add Records to IG Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1353984783,
          "mode": "list",
          "cachedResultName": "YouTube (Long) Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1353984783"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "url": "={{ $json.url }}",
            "date": "={{ $json.date }}",
            "channelName": "={{ $json.channelName }}",
            "channelUrl": "={{ $json.channelUrl }}",
            "numberOfSubscribers": "={{ $json.numberOfSubscribers }}",
            "likes": "={{ $json.likes }}",
            "viewCount": "={{ $json.viewCount }}",
            "title": "={{ $json.title }}",
            "thumbnailUrl": "={{ $json.thumbnailUrl }}",
            "id": "={{ $json.id }}",
            "Caption": "={{ $json.text }}",
            "duration": "={{ $json.duration }}",
            "videoUrl": "={{ $json.videoUrl }}"
          },
          "matchingColumns": [
            "url"
          ],
          "schema": [
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Used",
              "displayName": "Used",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "channelName",
              "displayName": "channelName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "channelUrl",
              "displayName": "channelUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "numberOfSubscribers",
              "displayName": "numberOfSubscribers",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "videoUrl",
              "displayName": "videoUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Caption",
              "displayName": "Caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "likes",
              "displayName": "likes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "duration",
              "displayName": "duration",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Transcript",
              "displayName": "Transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1640,
        -80
      ],
      "id": "1a9835c2-00d9-4243-8dc1-11317c18ada3",
      "name": "Add Records to YT Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1707751987,
          "mode": "list",
          "cachedResultName": "LinkedIn Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1707751987"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "url"
          ],
          "schema": [
            {
              "id": "posted_at/date",
              "displayName": "posted_at/date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "author/username",
              "displayName": "author/username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "author/profile_url",
              "displayName": "author/profile_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "text",
              "displayName": "text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stats/like",
              "displayName": "stats/like",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stats/comments",
              "displayName": "stats/comments",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stats/love",
              "displayName": "stats/love",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stats/reposts",
              "displayName": "stats/reposts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stats/total_reactions",
              "displayName": "stats/total_reactions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "media/thumbnail",
              "displayName": "media/thumbnail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "media/type",
              "displayName": "media/type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "media/url",
              "displayName": "media/url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stats/celebrate",
              "displayName": "stats/celebrate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stats/insight",
              "displayName": "stats/insight",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stats/support",
              "displayName": "stats/support",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "urn",
              "displayName": "urn",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1640,
        -340
      ],
      "id": "4027b446-5b4f-42b8-91ef-01fddfdcded8",
      "name": "Add Records to LI Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1707751987,
          "mode": "list",
          "cachedResultName": "LinkedIn Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1707751987"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "url",
              "lookupValue": "={{ $json.url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1160,
        -400
      ],
      "id": "e3878445-e988-4ae6-a8da-9190e609ecfe",
      "name": "Find LI Rows",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1353984783,
          "mode": "list",
          "cachedResultName": "YouTube (Long) Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1353984783"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "url",
              "lookupValue": "={{ $json.url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1160,
        -140
      ],
      "id": "fc0c347e-5b00-4e65-a9e7-baf15eda565d",
      "name": "Find YT Rows",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1130347352,
          "mode": "list",
          "cachedResultName": "IG Reels Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1130347352"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "url",
              "lookupValue": "={{ $json.url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1160,
        140
      ],
      "id": "832e4a05-7dc6-41ec-8737-1f8d128d438b",
      "name": "Find IG Rows",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 969315551,
          "mode": "list",
          "cachedResultName": "X Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=969315551"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "url",
              "lookupValue": "={{ $json.url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1160,
        360
      ],
      "id": "b9cca553-9824-4dd8-8255-24439eaadf86",
      "name": "Find X Rows",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 969315551,
          "mode": "list",
          "cachedResultName": "X Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=969315551"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "author/twitterUrl": "={{ $json.author.twitterUrl }}",
            "author/createdAt": "={{ $json.author.userName }}",
            "url": "={{ $json.url }}",
            "author/followers": "={{ $json.author.followers }}",
            "viewCount": "={{ $json.viewCount }}",
            "likeCount": "={{ $json.likeCount }}",
            "text": "={{ $json.text }}"
          },
          "matchingColumns": [
            "url"
          ],
          "schema": [
            {
              "id": "author/createdAt",
              "displayName": "author/createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "author/twitterUrl",
              "displayName": "author/twitterUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "author/followers",
              "displayName": "author/followers",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "text",
              "displayName": "text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Suggestions",
              "displayName": "Suggestions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Used",
              "displayName": "Used",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1640,
        420
      ],
      "id": "e865179d-3a61-49a2-95c3-fc71caa4a79a",
      "name": "Add Records to X Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1130347352,
          "mode": "list",
          "cachedResultName": "IG Reels Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1130347352"
        },
        "event": "rowAdded",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        280,
        860
      ],
      "id": "322b08dc-cff9-4e39-9d00-1d141fdcc3b9",
      "name": "Trigger: Row Added (IG Sheet)",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "cTrSVDg9vWTv2WkL",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1353984783,
          "mode": "list",
          "cachedResultName": "YouTube (Long) Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1353984783"
        },
        "event": "rowAdded",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        300,
        1280
      ],
      "id": "7ad02d13-02bc-4cfd-ba0b-cbe7d7d964be",
      "name": "Trigger: Row Added (YT Sheet)",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "cTrSVDg9vWTv2WkL",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ab0c260c-d03f-43a7-9302-8263012ddd6a",
              "leftValue": "={{ $json.Transcript }}",
              "rightValue": "{Transcript} = BLANK()",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        520,
        860
      ],
      "id": "7fd9ce11-d691-4802-98a3-2bb8b7186c5c",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3bfcaae3-72e7-4ad3-bfd6-94437debaa42",
              "leftValue": "={{ $json.Transcript }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        480,
        1280
      ],
      "id": "40daf673-fd92-45ea-b6aa-11961c2de1e4",
      "name": "If1"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1080,
        860
      ],
      "id": "f5181ab3-aa1c-4c2b-9014-5faff18ed4aa",
      "name": "Download IG Reel",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1130347352,
          "mode": "list",
          "cachedResultName": "IG Reels Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1130347352"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Transcript": "={{ $json.Transcript }}",
            "url": "={{ $('Download IG Reel').item.json.url }}"
          },
          "matchingColumns": [
            "url"
          ],
          "schema": [
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Created",
              "displayName": "Created",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Used",
              "displayName": "Used",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ownerUsername",
              "displayName": "ownerUsername",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "videoUrl",
              "displayName": "videoUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Transcript",
              "displayName": "Transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "caption",
              "displayName": "caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "likesCount",
              "displayName": "likesCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/0",
              "displayName": "hashtags/0",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/1",
              "displayName": "hashtags/1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/2",
              "displayName": "hashtags/2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/3",
              "displayName": "hashtags/3",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/4",
              "displayName": "hashtags/4",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/5",
              "displayName": "hashtags/5",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/6",
              "displayName": "hashtags/6",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/7",
              "displayName": "hashtags/7",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/8",
              "displayName": "hashtags/8",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/9",
              "displayName": "hashtags/9",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/10",
              "displayName": "hashtags/10",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/11",
              "displayName": "hashtags/11",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/12",
              "displayName": "hashtags/12",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/13",
              "displayName": "hashtags/13",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/14",
              "displayName": "hashtags/14",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "hashtags/15",
              "displayName": "hashtags/15",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "videoViewCount",
              "displayName": "videoViewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "videoDuration",
              "displayName": "videoDuration",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "commentsCount",
              "displayName": "commentsCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1680,
        860
      ],
      "id": "04dc6437-00e6-4c62-98ab-0461bfa66bea",
      "name": "Update IG Sheet Transcript",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE",
          "mode": "list",
          "cachedResultName": "Master Social Scraper [TEMPLATE]",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1353984783,
          "mode": "list",
          "cachedResultName": "YouTube (Long) Scrape",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1D14BnuorvWUoMvkaeMp8f8PADAdGKBFb1U6yFC5vwkE/edit#gid=1353984783"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "url": "={{ $('Trigger: Row Added (YT Sheet)').item.json.url }}",
            "Transcript": "={{ $json.Transcript }}"
          },
          "matchingColumns": [
            "url"
          ],
          "schema": [
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Used",
              "displayName": "Used",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "channelName",
              "displayName": "channelName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "channelUrl",
              "displayName": "channelUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "numberOfSubscribers",
              "displayName": "numberOfSubscribers",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "videoUrl",
              "displayName": "videoUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Caption",
              "displayName": "Caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likes",
              "displayName": "likes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "duration",
              "displayName": "duration",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Transcript",
              "displayName": "Transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1740,
        1280
      ],
      "id": "f1d2b6f6-6788-4744-9572-8b61ec42a984",
      "name": "Update YT Sheet Transcript",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nuIKS89ZnY7gxINP",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/1s7eXiaukVuOr4Ueg/run-sync-get-dataset-items",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer apify_api_TZIb2yKKetN4gclE8oTTpB4tfKNEc4250Rs6"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"channelHandleBoolean\": true,\n  \"channelIDBoolean\": false,\n  \"channelNameBoolean\": true,\n  \"commentsBoolean\": false,\n  \"datePublishedBoolean\": true,\n  \"dateTextBoolean\": false,\n  \"descriptionBoolean\": false,\n  \"keywordsBoolean\": false,\n  \"likesBoolean\": false,\n  \"maxRetries\": 8,\n  \"proxyOptions\": {\n    \"useApifyProxy\": true,\n    \"apifyProxyGroups\": [\n      \"BUYPROXIES94952\"\n    ]\n  },\n  \"relativeDateTextBoolean\": true,\n  \"subscriberCountBoolean\": false,\n  \"thumbnailBoolean\": false,\n  \"uploadDateBoolean\": false,\n  \"urls\": [\n    \"{{ $json.url }}\"\n  ],\n  \"viewCountBoolean\": false\n} ",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1000,
        1280
      ],
      "id": "8061024c-0a5d-4998-8f73-24adab0432d7",
      "name": "Generate Transcript"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "=Please combine all captions end to end to create a single text block. \n\n {{ $json.captions }}"
            },
            {
              "content": "you are a helpful assistant. Your role is to create a text block combining all captions. ",
              "role": "system"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1220,
        1280
      ],
      "id": "bb8ffa13-532e-4591-af5b-f516c15ea430",
      "name": "OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "LCQSyEofGMlre7us",
          "name": "OpenAi account 3"
        }
      }
    }
  ],
  "pinData": {
    "Generate Transcript": [
      {
        "json": {
          "title": "I Built the Ultimate Team of AI Agents in n8n With No Code (Free Template)",
          "channelHandle": "@nateherk",
          "channelName": "Nate Herk | AI Automation",
          "isShorts": false,
          "relativeDateText": "2 months ago",
          "datePublished": "2025-02-02T20:05:00-08:00",
          "videoId": "9FuNtfsnRNo",
          "captions": [
            "hey guys so what we&#39;re going to be",
            "looking at today is the ultimate",
            "personal assistant and I&#39;m super excited",
            "to share this build with you guys as you",
            "can see the ultimate assistant has",
            "access to these four agents that we",
            "built out within nadn the first one is",
            "an email agent it looks like this this",
            "one has the ability to send emails reply",
            "to emails label emails create drafts get",
            "emails get labels and Mark emails as",
            "unread the next agent is a calendar",
            "agent it looks like this it can update",
            "events create events with attendees get",
            "events and delete events as well then we",
            "have a content creator agent that can",
            "search the web and then it creates blog",
            "posts for us and then finally we have",
            "the contact agent that&#39;s able to get",
            "contacts and also add or update contacts",
            "in our air table contact database and",
            "then finally we also gave it access to",
            "tavali here is just a tool in case it",
            "needs to do some web search",
            "functionality so let&#39;s run through a few",
            "demos show off all the tools show off",
            "all the functionality and then I&#39;m going",
            "to show you guys how you can download",
            "this workflow for completely free and",
            "then plug it into your nadn and get",
            "started can you please set up a team",
            "sync tonight for 6 p.m. with Nate",
            "herkelman and then send him an email to",
            "confirm if that time works okay so right",
            "now telegram just sent over that audio",
            "file it&#39;s getting transcribed now the",
            "ultimate assistant has to decide what to",
            "do so first of all it hit the contact",
            "agent to get Nate Herman&#39;s email address",
            "now it&#39;s hitting calendar and email",
            "agent simultaneously to create that",
            "event as you can see it just popped up",
            "right here and send that email so we",
            "just got our response back from telegram",
            "the team sync with Nate herkelman has",
            "been scheduled for tonight at 6 p.m. you",
            "can manage the event here additionally",
            "an email has been sent to confirm if",
            "that time works for him if there&#39;s",
            "anything else you need just let me know",
            "so here we have our caler invite you can",
            "see that Nate herkelman got added as a",
            "guest then hopping into our sent emails",
            "we can see hey Nate I hope this m",
            "message finds you well could you confirm",
            "if 6 p.m. works for our upcoming team",
            "sync let me know let&#39;s say that that",
            "time didn&#39;t work for Nate let&#39;s push it",
            "back an hour can you actually push the",
            "team sync back an hour okay so that&#39;s",
            "going to get sent through same thing",
            "transcribing the audio the ultimate",
            "assistant has memory so it&#39;s going to be",
            "aware of what we&#39;re talking about when",
            "we say can you push that back an hour as",
            "you can see it just hit the contact",
            "agent now it&#39;s hitting calendar and",
            "email agent so we&#39;re going to watch",
            "right here as the team sync gets bumped",
            "back an hour it just got moved and we",
            "also see that the agent responded with",
            "Team Sync has been pushed back 7:00 p.m.",
            "and an email confirming the rescheduled",
            "time has been sent to Nate so that",
            "really shows you the power of this",
            "ultimate assistant because we didn&#39;t",
            "even ask it to follow up with Nate by",
            "email but it went ahead and did it",
            "anyways here we go in our emails we can",
            "see Team sync rescheduled dear Nate",
            "herkelman um I&#39;m writing to confirm that",
            "the team Sync has been rescheduled to",
            "7:00 p.m. tonight anyways let&#39;s take a",
            "look at our inbox we can see we have a",
            "new email from Nate herkelman checking",
            "in how are you let&#39;s say that we want to",
            "respond to this email in that same",
            "thread all we have to do is ask our",
            "ultimate assistant to do so for us",
            "please respond to my email from Nate",
            "herkelman saying that I&#39;m doing well",
            "okay that&#39;s going to get sent off once",
            "again it&#39;s going to grab that",
            "information it&#39;s going to hit the email",
            "agent and then we&#39;re going to take a",
            "look at what actually happens within the",
            "email agent to reply to this message we",
            "just got our message back I&#39;ve replied",
            "to the email with I&#39;m doing well so",
            "let&#39;s quickly refresh our Gmail we can",
            "see that in this thread we have now I&#39;m",
            "doing well signed off by Nate and now",
            "we&#39;re going to go into the email agent",
            "and check that execution to see what",
            "actually happened so here&#39;s that",
            "execution of the email agent as you can",
            "see it hit the tool called email reply",
            "which is awesome because it&#39;s going to",
            "put it in the same thread but what we",
            "see here is that we need to get a",
            "message ID and this isn&#39;t something that",
            "we&#39;d be able to get by ourselves without",
            "getting all of the email information so",
            "what the email agent has to do is first",
            "of all grab emails from Nate herkelman",
            "as you can see it pulls in the sender",
            "which is upad digital gmail.com and then",
            "it&#39;s able to look through the emails",
            "that we&#39;re talking about grab that",
            "message ID and then plug it into the",
            "email reply tool so that&#39;s how it",
            "actually replied in that same thread so",
            "this type of logic is really cool and I",
            "want to show an example of doing",
            "labeling emails because in the label",
            "email tool what we need is a message ID",
            "but we also need a label ID so in order",
            "for the agent to actually label emails",
            "it&#39;s going to have to get all emails get",
            "all labels so that it has IDs for labels",
            "and messages to feed into this tool so",
            "let&#39;s do an example of that please label",
            "my recent email from Nate herkelman as",
            "high priority there we go it&#39;s hitting",
            "the email agent and then we&#39;ll take a",
            "look at the execution and see how that",
            "worked so we got our message the recent",
            "email from Nate hman has been labeled as",
            "high priority let&#39;s refresh our Gmail we",
            "can see right here this is the one we",
            "talking about it just got moved to high",
            "priority and here we have the most",
            "recent execution of the email agent as",
            "you can see what it had to do to fill in",
            "the parameters for label ID it had to",
            "get message ID and label ID and it got",
            "this by activating the get email tool to",
            "get the message ID and then get the",
            "labels for the label ID super cool stuff",
            "okay let&#39;s try out some other",
            "functionality can you please create a",
            "blog about deep seek and then put it in",
            "a draft for Nate herkelman okay this is",
            "going to send it off to the content",
            "creator agent which has um a workflow in",
            "there where it&#39;s able to search the",
            "internet grab back articles and then",
            "it&#39;s going to use that information to",
            "create a blog and then what it&#39;s going",
            "to do is hit the contact agent to get",
            "Nate Herman&#39;s contact information once",
            "again and then it&#39;s going to hit the",
            "email agent to draft that email for him",
            "and by the way in the ultimate assistant",
            "I&#39;m using GPT 40 and all of these agents",
            "I&#39;m using GPT 40 except for the content",
            "creator agent I&#39;m using Claude 3.5 Sonet",
            "because I really like the way that it&#39;s",
            "able to structure content human readable",
            "HTML whatever it is I like the way that",
            "it retrieves content for us okay here we",
            "go the blog about deep seek has been",
            "created and included in a draft email",
            "for Nate herkelman so let&#39;s take a look",
            "at the draft real quick okay we&#39;re in my",
            "draft as you can see it&#39;s right here if",
            "we pull it up it&#39;s in a HTML format",
            "let&#39;s actually make this bigger real",
            "quick and take a look at it so deep seek",
            "Revolution AI with breakthrough",
            "technology and Energy Efficiency we&#39;ve",
            "got different headers here we&#39;ve got",
            "bullet points we&#39;ve got benefits",
            "potential applications challenges and",
            "concerns and then we&#39;ve also got sources",
            "at the bottom which is just really cool",
            "for a really quick agent to throw that",
            "together okay one last demo then really",
            "dive into this build let&#39;s say can you",
            "please get my calendar availability for",
            "today and then send that in an email to",
            "Nate",
            "herkelman there we go hitting the",
            "calendar agent right now it&#39;s getting",
            "availability as you can see we only have",
            "three meetings today so this is what we",
            "should get pulled back um as our sort of",
            "unavailable slots and then hopefully",
            "it&#39;s going to take that information get",
            "contact information for Nate herkelman",
            "and then send an email to them with our",
            "availability okay there we go the email",
            "with your calendar availability for",
            "today has been sent to Nate herkelman",
            "let&#39;s take a look at it so here&#39;s what",
            "the email looks like dear Nate here&#39;s my",
            "calendar availability for today 12:00",
            "to1 I&#39;m busy with a meeting with you 7",
            "to8 team sync 8 to9 strategy meeting and",
            "then it provides links to all those",
            "events It also says I&#39;m free before 1200",
            "between 1 and 7 and after 9: so that&#39;s",
            "pretty cool too okay so before we start",
            "breaking down this ultimate assistant",
            "with all the other agents that we built",
            "if you want to download this workflow as",
            "as well as the email agent the calendar",
            "agent the content creator agent and the",
            "contact agent you can do so by joining",
            "my free school Community the link for",
            "that is down in the description you&#39;ll",
            "go to YouTube resources click on the",
            "post associated with this video and then",
            "you see right here you can download",
            "those Json files to load straight into",
            "your nnn environment and if you&#39;re",
            "looking to take your skills with naden a",
            "little farther and you&#39;re looking for",
            "more Hands-On approach please feel free",
            "to check out my paid Community the link",
            "for that is also down in the description",
            "we&#39;ve got a great community of members",
            "who are always sharing resources about",
            "nadn um sharing builds sharing",
            "challenges they&#39;re having we also got a",
            "great classroom section with resources",
            "that are always being updated right now",
            "we&#39;re focusing on a deep dive within",
            "building AI agents but there are other",
            "Deep dive topics like vector databases",
            "and finally we have a calendar section",
            "with five live calls per week to make",
            "sure you&#39;re always getting your",
            "questions answered never getting stuck",
            "and also being able to network with",
            "other like-minded individuals in this",
            "community so I&#39;d love to see you guys in",
            "here let&#39;s get back to the video okay",
            "there&#39;s a lot going on in this build so",
            "let&#39;s Dive Right In and I&#39;ll try to",
            "break everything down as simple as I can",
            "so let&#39;s first of all just start with",
            "the inputs and the outputs we&#39;re working",
            "with telegram so we have a telegram",
            "trigger set up that&#39;s watching for our",
            "messages when it comes through it&#39;s",
            "either going to come through as a text",
            "file or a voice file so if it comes",
            "through as voice what we&#39;re doing is",
            "we&#39;re using this switch to see if the",
            "voice file exists if it does it&#39;s going",
            "to send it up this way to download the",
            "file in telegram transcribe that file",
            "and then it feeds it into the ultimate",
            "assistant if it comes through as text",
            "which actually let me show you guys that",
            "real quick so I&#39;m saying search the web",
            "for puppies we sent that over as a text",
            "so as you can see it&#39;s going to go down",
            "this route because right in here we&#39;re",
            "seeing if um the json. message. text",
            "exists rather than the voice file so",
            "anyways they both feed through into the",
            "agent and it&#39;s going to work all the",
            "same real quick let&#39;s see what we got",
            "here are some interesting stories about",
            "puppies so the Puppy Bowl it&#39;s going to",
            "give us a link to read more um pause",
            "Chicago pet of the week Kirby it&#39;s going",
            "to give us a link to watch the video and",
            "um then finally we have one more video",
            "that we can click on the link to watch",
            "and that&#39;s how that search functionality",
            "works but what we&#39;re doing here is we&#39;re",
            "setting them both to equal a field",
            "called text so as you can see through",
            "here we&#39;re mapping this to text so that",
            "it&#39;s going to feed through so that the",
            "agent can just be looking for a field",
            "called json. text and now I&#39;m in an",
            "execution where we used our voice and as",
            "you can see what&#39;s leaving the",
            "transcribe node is a field called text",
            "so once again the ultimate assistance",
            "now I&#39;m in an execution where we trigger",
            "this workflow with our voice as you can",
            "see coming out of the transcribe node is",
            "a field called text so we&#39;re able to",
            "feed in the agent json. text and it&#39;s",
            "able to understand what we&#39;re saying",
            "whether it&#39;s voice or text and then as",
            "far as the output all it&#39;s happening",
            "here is we&#39;re responding in that same",
            "telegram chat ID so we&#39;re grabbing the",
            "chat ID that&#39;s coming in from the",
            "trigger and then we&#39;re just outputting",
            "exactly what the ultimate assistant",
            "output to us okay cool so from there",
            "let&#39;s take a look at the ultimate",
            "assistant prompt so we all understand",
            "what is going on now what I think is",
            "really really cool about this ultimate",
            "assistant framework is that as you can",
            "see this prompt is not very long or not",
            "very complex and similarly with all the",
            "other agents the prompts are not very",
            "long and not very complex so this is",
            "really cool because every agent sort of",
            "specializes in something rather than",
            "loading up one agent with a ton of tools",
            "and a huge prompt so in this case the",
            "ultimate assistant is just in charge of",
            "delegating tasks as we said your job is",
            "to send the user&#39;s query to the correct",
            "tool you should never be writing emails",
            "or creating event summaries all you need",
            "to do is just call the correct tool so",
            "that makes it really easy for this guy",
            "then we Define what the tools are so",
            "email agent use it for email actions",
            "calendar agent use it for calendar",
            "actions contact agent content creator",
            "and then Tav for web search we did have",
            "to give it a rule which is pretty",
            "important so we said some actions",
            "require you to look up contact",
            "information first so for the following",
            "actions you need to get contact",
            "information and then you send that to",
            "the agent who needs the contact",
            "information so in this case if you&#39;re",
            "looking to send emails draft emails or",
            "create calendar events with attendees",
            "you need to get contact information",
            "first and then I was able to get away",
            "with having this agent perform pretty",
            "well with only giving one example which",
            "is here&#39;s an input send an email to Nate",
            "herkelman asking what time he wants to",
            "leave first action is you use the",
            "contact agent to get Nate Herman&#39;s email",
            "then you use the email agent to send the",
            "email and you&#39;ll pass the tool a query",
            "like send Nate herkelman an email to ask",
            "what time he wants to leave so all we&#39;re",
            "doing is getting the email agent an",
            "actual query rather than sending trying",
            "to write an email and send that over and",
            "then finally we just gave it access to",
            "the current date and time okay so how",
            "are we actually able to give the",
            "ultimate assistant access to those",
            "workflows that we bu built out like the",
            "email agent and the calendar agent what",
            "we need to do is we add them as tools so",
            "we can click on the plus under the tool",
            "section and we&#39;re going to click on call",
            "NN workflow as a tool so when we click",
            "on this we have a couple things to set",
            "up the first thing is we actually need",
            "to give it a name and this is the name",
            "that the AI agent will be looking for",
            "when you define them in the system",
            "prompt so in here as you can see I said",
            "these are the tools you have email agent",
            "calendar agent and those are all in",
            "camel case and as you can see here those",
            "aren&#39;t camel case but in here I actually",
            "Define the name in camel case so that&#39;s",
            "what the agents look for anyways once",
            "you&#39;re in this tool what you need to do",
            "is give it a name so this is just an",
            "example you need to give it a",
            "description so let&#39;s say this was the",
            "email agent what we would say is call",
            "this tool for email actions right um so",
            "email actions is there and then what",
            "we&#39;re doing is we&#39;re just going to grab",
            "it from our database you could also do",
            "it by Json we don&#39;t want to do that",
            "we&#39;re just going to do it by database",
            "and then it&#39;s going to basically just be",
            "a drop down list for us to choose from",
            "so in this case um you know that&#39;s why I",
            "was pulling in the email agent or we",
            "were pulling in the calendar agent right",
            "here so that&#39;s pretty much how it works",
            "and then you may be wondering okay so",
            "the ultimate assistant calls this tool",
            "great then the tool goes through the",
            "process of taking action whatever it",
            "needs to do and then it has to respond",
            "back to the main agent so the main agent",
            "actually knows what&#39;s going on and so",
            "there used to be a parameter here called",
            "um field to return and then we&#39;d always",
            "it was by default called response so",
            "that&#39;s why um out of habit I always set",
            "my last node as a set node to response I",
            "don&#39;t think you have to call it response",
            "anymore because right here it says the",
            "tool will call the workflow you define",
            "below and it will look in the last node",
            "for the response the workflow needs to",
            "start with an execute workflow trigger",
            "so um this email agent that we&#39;re",
            "calling it&#39;s starting with an execute",
            "workflow trigger the query comes over",
            "the email agent decides what to do and",
            "then the email agent outputs a response",
            "which is either you know hey the email",
            "got sent to Nate herkelman saying all",
            "this kind of stuff or the email agent",
            "failed and then we output this response",
            "that says um you know unable to perform",
            "the task please try again and this",
            "introduces a really cool element of the",
            "agents being able to talk to each other",
            "more than just here&#39;s a query here&#39;s my",
            "output but also like hey I&#39;m having",
            "issues try again so that&#39;s what&#39;s going",
            "on as far as like data transferring",
            "between different workflows so this is",
            "really cool because rather than having",
            "all the email Tools in this workflow and",
            "all the calendar Tools in this workflow",
            "all it has to do is just send it off",
            "once and then this email agent is able",
            "to figure out with the incoming query",
            "what it needs to do so if we click into",
            "an execution here we&#39;ll look at one of",
            "the examp examples we just did in the",
            "demo so let&#39;s click into this one that",
            "took 30 seconds to run because it was",
            "probably a little bit more of a complex",
            "query all this this agent is getting is",
            "um create a draft for Nate herkelman at",
            "upit digital.com and it gives us a",
            "subject and then it gives us the actual",
            "blog that we needed to send over and",
            "here&#39;s that example again where we asked",
            "it to label one of our emails the query",
            "that it got was label the recent email",
            "from Nate herkelman as high priority so",
            "what it had to do was understand which",
            "tools to use so let&#39;s look at the email",
            "agents prompt so as you can see this",
            "prompt is super short and it&#39;s just",
            "super concise super clear which is",
            "awesome because it really allows us to",
            "add on more tools and to the ultimate",
            "assistant continue to add on more and",
            "more agents because right now it&#39;s not",
            "overwhelmed with what it&#39;s doing so the",
            "overview is you&#39;re an email management",
            "assistant all emails must be formatted",
            "professionally in HTML and signed off as",
            "Nate so here are the tools that you have",
            "access to send email to send emails",
            "create drafts get emails get labels so",
            "those are all pretty intuitive because",
            "the name of the tool pretty much says",
            "what the tool does but then we have a",
            "couple that we had to give more",
            "instructions to so use Mark unread to",
            "mark an email is unread but you must use",
            "get emails first so you have the message",
            "ID of the email to flag as unread",
            "similarly with labeling emails you need",
            "to use get emails first so you have the",
            "message ID of the email to flag then you",
            "have to use get labels so you have the",
            "label ID and finally with email reply",
            "same thing get emails first so that you",
            "have the message ID to put into the the",
            "tool um reply to emails so first things",
            "first the email agent is being triggered",
            "when it&#39;s called by another workflow so",
            "as we saw in the demo in the visual with",
            "the green um spinny things um when the",
            "ultimate assistant decides to send a",
            "query it&#39;s going to hit the email agent",
            "and then it sends something over and",
            "then right here is where that email",
            "agent actually captures that query and",
            "then what we&#39;re doing here is we&#39;re",
            "basically having two options for output",
            "the first one is if success we&#39;re going",
            "to return the output of the main agent",
            "back to the ultimate assistant so by by",
            "setting this field to response it&#39;s",
            "going to be looking for json. output and",
            "so some of you guys i&#39; I&#39;ve seen have",
            "been there have been questions about",
            "this but basically when you&#39;re setting",
            "up workflow as a tool you can see that",
            "it says the tool will call the workflow",
            "you def find below and it will look in",
            "the last node for the response so",
            "whatever node you have at the end of",
            "your workflow that&#39;s where the main",
            "agent that you called originally is",
            "going to be looking over here so we have",
            "success and we have try again we were",
            "able to set this up by coming into the",
            "agent clicking on settings and then",
            "using on error continue using error",
            "output so this so what this did is it",
            "broke up two branches so if there&#39;s an",
            "error in the email agent it&#39;s going to",
            "come over here and it&#39;s going to send",
            "back unable to perform task please try",
            "again and then the ultimate personal",
            "assistant will read this and likely send",
            "over a new query to try the process",
            "again so we&#39;re going to dive into these",
            "different tools down here and how they",
            "actually work um for the email one but",
            "then pretty much they&#39;re all going to be",
            "using that same sort of from AI",
            "framework that I&#39;m about to dive into so",
            "we won&#39;t break all of them down as in",
            "detail but let&#39;s take a look at these",
            "tools here so first thing that I&#39;m going",
            "to do is I&#39;m going to come into our node",
            "which is one executed by another",
            "workflow and we&#39;re going to enter in a",
            "query here so that we can just test this",
            "environment easier rather than than",
            "having to have the ultimate assistant",
            "send over a query every time so in here",
            "I&#39;m I&#39;m typing out send an email",
            "to Nate herk 88@gmail.com",
            "asking what&#39;s up and what his favorite",
            "color",
            "is okay so that&#39;s the query that this",
            "agent&#39;s going to be getting right so we",
            "have this set um and this is similar to",
            "a query that the ultimate assistant",
            "would actually be passing over to us so",
            "we&#39;ll hit play so the email agent starts",
            "thinking about it using its prompt to",
            "understand what tools it needs to hit we",
            "know that all it needs to do really is",
            "hit the send email tool as you can see",
            "it didn&#39;t activate any of the other ones",
            "but you may be thinking how does it know",
            "how to actually do that so in this tool",
            "and for all the other tools like I",
            "mentioned we&#39;re going to be using a",
            "function called from AI so as you can",
            "see right here use the Expression from",
            "AI for any data to be filled in by the",
            "model so this is really really cool",
            "because Within These different",
            "parameters like who the email is going",
            "to what the subject is what the message",
            "is we can basically just tell the AI to",
            "fill this in by itself based on a few",
            "like a key and a definition and in this",
            "case we&#39;re not even using a definition",
            "we&#39;re just using a key so as you can see",
            "here um in the two field we put from Ai",
            "and we told AI that you&#39;re looking for",
            "an email address so based on the queer",
            "that was coming in it was able to to",
            "define the email address as Nate herk",
            "similarly for this second part where we",
            "were doing from AI subject it was able",
            "to make a subject based on the query",
            "which is what&#39;s up and then down here as",
            "you can see the email body is it&#39;s an",
            "HTML so it looks a little weird here but",
            "it&#39;s saying hi Nate I hope you&#39;re doing",
            "well I was wondering what&#39;s up with you",
            "these days also I&#39;m curious to know",
            "what&#39;s your favorite color looking",
            "forward to your",
            "reply so that&#39;s how the from AI function",
            "can really really speed up the process",
            "of creating these agents giving them",
            "tools hooking them up really easily",
            "because we don&#39;t have to go through",
            "different logic to actually pull out",
            "from a query what is the two what is the",
            "subject what&#39;s the message we can put it",
            "right in here and the AI is going to do",
            "all that for us and I just absolutely",
            "love this function okay setting a new",
            "query in here mark my email from Nate",
            "herkelman as unread there there&#39;s the",
            "query let&#39;s send that over and we&#39;ll see",
            "what happens and then we&#39;ll take a look",
            "at what&#39;s going on Within These tools so",
            "if you remember it has to get emails",
            "first because in the mark unread tool",
            "it&#39;s asking for a message ID of which",
            "one we need to go in there and Mark is",
            "unread so first thing it needs to do is",
            "go into get emails we&#39;re looking for",
            "sender of Nate herkelman and in this",
            "this thing we can say a sender is either",
            "the name that comes through in Gmail or",
            "it&#39;s the actual email address so in this",
            "case Nate herkelman works it could have",
            "also been up at digital gmail.com and it",
            "would have worked the same anyways we&#39;re",
            "grabbing one email from Nate herkelman",
            "which is the most recent one and then",
            "we&#39;re grabbing that message ID which is",
            "right here and then in the mark unread",
            "tool all we have to do is say hey you&#39;re",
            "going to be looking for the response and",
            "then you&#39;re going to be looking for a",
            "message ID which it grabs right here and",
            "so as you can see it went ahead and",
            "marked this one as unread this one is",
            "marked as un red but it&#39;s just the one",
            "that we just sent to ourselves where we",
            "said you know um what&#39;s your favorite",
            "color but this is the one that we",
            "previously had clicked on in the demo we",
            "made it high priority but now it just",
            "marked it as unread so the tool worked",
            "so exact same thing with the calendar",
            "agent it&#39;s being triggered by the",
            "personal assistant it has access to",
            "these five tools and then we&#39;re",
            "responding with either success or try",
            "again or success is the output of the",
            "calendar agent and then try again is",
            "just basically saying an error has",
            "occurred please try again once again The",
            "Prompt for this guy is super super",
            "simple which is just awesome your",
            "calendar assistant your responsibilities",
            "include creating getting and deleting",
            "events so then we Define the tools",
            "create event with an attendee when an",
            "event includes a participant create",
            "event for solo events get events to",
            "fetch events and then for delete and",
            "update we needed it to get Events first",
            "so that it could get the ID of the event",
            "to delete and then finally we gave it",
            "today&#39;s current date and time and then",
            "we said if a duration for an event isn&#39;t",
            "specified just assume that it&#39;s going to",
            "be 1 hour long so um if you&#39;re curious",
            "why there&#39;s one for create event and one",
            "for create an event with attendee it&#39;s",
            "because there&#39;s a parameter in here",
            "called attendees so in here we don&#39;t",
            "have that filled out but in this one we",
            "do and so if you were to try to create",
            "an event in this node with no attendee",
            "and you left this blank the request just",
            "wouldn&#39;t go through so that&#39;s why we",
            "have two different ones and we just have",
            "to specify okay if you want to have an",
            "event with someone invited then you&#39;re",
            "going to use this one otherwise you&#39;ll",
            "just use the basic create event function",
            "and so pretty similar logic with like",
            "deleting an updating event as the same",
            "thing with our um replying to emails and",
            "labeling emails and the other agent",
            "because you have to get the ID of the",
            "event to actually update it or delete it",
            "so we&#39;re going to do a quick example",
            "we&#39;re just going to ask it to delete an",
            "event so we&#39;ll come in here hit test",
            "workflow so our telegram trigger is",
            "listening for us and then we&#39;re going to",
            "say could you please delete the team",
            "sync tonight at 700 p.m. so we&#39;ll send",
            "that off it should be hitting the",
            "calendar agent and then it&#39;s going to",
            "grab that event get the ID and then it&#39;s",
            "going to delete it we can watch this",
            "happen probably in real time right down",
            "here Boom the team sync was just deleted",
            "and then the agent responded team Sync",
            "has been cancelled so that&#39;s how that",
            "works okay so now let&#39;s take a look at",
            "our contact agent this one&#39;s a lot",
            "simpler it just has the option to get",
            "contacts or add or update contacts the",
            "assistant prompt for this guy is your",
            "contact management assistant your",
            "responsibilities include looking up",
            "contacts adding new ones or updating",
            "them and then we Define the tools um as",
            "you can see retrieve contacts or add or",
            "update so let&#39;s do an example of this",
            "real quick so telegram&#39;s listening for",
            "us and I&#39;m not going to just have it get",
            "contacts because it&#39;s been doing that",
            "for all the demos what we&#39;re going to do",
            "is we&#39;re going to change Michael Scott&#39;s",
            "email so can you please change Michael",
            "Scott&#39;s email to Michael",
            "dundermifflin.com send that off it&#39;s",
            "going to go to the contact agent of",
            "course and then we should see an air",
            "table right over here Michael Scott&#39;s",
            "emailed boom it just got popped and",
            "changed to Michael dundermifflin.com",
            "rather than Michael Scott",
            "dundermifflin.com so that&#39;s how you can",
            "really quickly update contacts and then",
            "obviously pull them back using that that",
            "contact agent and then the final agent",
            "of course is the content creator agent",
            "so let&#39;s pop into this system prompt",
            "here all we were saying is you are a",
            "skilled AI blog writer specializing in",
            "engaging well structured informative",
            "content you have one tool which is",
            "tavali and you&#39;re just going to use this",
            "to search the web about the requested",
            "topic for the blog post um and then we",
            "just gave it some blog requirements like",
            "formatting it as HTML we told to keep",
            "the links that it&#39;s getting from tavali",
            "so that the users can click into the",
            "links in the actual blog if they want to",
            "and obviously right now the use case has",
            "been write a blog and then um send it as",
            "an email but obviously you could hook",
            "this up to different social medias if",
            "you wanted to sort of automate that",
            "process or since you know we&#39;ve already",
            "seen that integration with air table or",
            "some other sort of database you could um",
            "just be pushing content constantly into",
            "a database that you could then go",
            "manually post if you want or use that to",
            "plug into something else so real quick",
            "I&#39;m going to load up an execution of the",
            "one that we had this agent WR for NVIDIA",
            "as you can see it went to tavali which",
            "is the tool and what we did here is",
            "we&#39;re sending over a request to tavali a",
            "post request in this Json body what",
            "we&#39;re doing is we&#39;re able to use a",
            "placeholder for any data that the model",
            "needs to fill in so similar to the from",
            "AI function except for rather than doing",
            "a from function we&#39;re just putting in a",
            "placeholder so right here you can see",
            "the placeholder for the query that we&#39;re",
            "searching tabl for is search term and",
            "that has two curly braces around it and",
            "then down here we&#39;re defining the",
            "placeholder name is search term the",
            "description is what the user has",
            "requested to write a blog about and that",
            "is a string variable type so when this",
            "request actually gets sent over to",
            "tavali in the body parameters they&#39;re",
            "filling in search term with probably",
            "Nvidia or actually sorry not Nvidia deep",
            "seek because that&#39;s the one that we",
            "asked it to write about so search term",
            "deep seek AI features benefits",
            "applications in modern technology",
            "sectors so these placeholders are",
            "working exactly the same as the from AI",
            "functions so while I was editing this",
            "video I realized that I never actually",
            "formally signed off the video I just",
            "kind of stopped recording so this is me",
            "signing off um that&#39;s going to be it for",
            "this one thanks guys so much for",
            "watching if you enjoy this one if you",
            "liked it then please drop me a like",
            "definitely helps me out a lot and let me",
            "know in the comments what else you want",
            "to see but as always appreciate you guys",
            "making it to the end of this one I&#39;ll",
            "see you guys in the next video thanks"
          ]
        }
      }
    ],
    "OpenAI1": [
      {
        "json": {
          "index": 0,
          "message": {
            "role": "assistant",
            "content": {
              "captions": "hey guys so what we're going to be looking at today is the ultimate personal assistant and I'm super excited to share this build with you guys as you can see the ultimate assistant has access to these four agents that we built out within nadn the first one is an email agent it looks like this this one has the ability to send emails reply to emails label emails create drafts get emails get labels and mark emails as unread the next agent is a calendar agent it looks like this it can update events create events with attendees get events and delete events as well then we have a content creator agent that can search the web and then it creates blog posts for us and then finally we have the contact agent that’s able to get contacts and also add or update contacts in our air table contact database and then finally we also gave it access to tavali here is just a tool in case it needs to do some web search functionality so let's run through a few demos show off all the tools show off all the functionality and then I'm going to show you guys how you can download this workflow for completely free and then plug it into your nadn and get started can you please set up a team sync tonight for 6 p.m. with Nate herkelman and then send him an email to confirm if that time works okay so right now telegram just sent over that audio file it's getting transcribed now the ultimate assistant has to decide what to do so first of all it hit the contact agent to get Nate Herman’s email address now it's hitting calendar and email agent simultaneously to create that event as you can see it just popped up right here and send that email so we just got our response back from telegram the team sync with Nate herkelman has been scheduled for tonight at 6 p.m. you can manage the event here additionally an email has been sent to confirm if that time works for him if there’s anything else you need just let me know so here we have our caler invite you can see that Nate herkelman got added as a guest then hopping into our sent emails we can see hey Nate I hope this m message finds you well could you confirm if 6 p.m. works for our upcoming team sync let me know let's say that that time didn’t work for Nate let's push it back an hour can you actually push the team sync back an hour okay so that's going to get sent through same thing transcribing the audio the ultimate assistant has memory so it's going to be aware of what we’re talking about when we say can you push that back an hour as you can see it just hit the contact agent now it's hitting calendar and email agent so we’re going to watch right here as the team sync gets bumped back an hour it just got moved and we also see that the agent responded with Team Sync has been pushed back 7:00 p.m. and an email confirming the rescheduled time has been sent to Nate so that really shows you the power of this ultimate assistant because we didn't even ask it to follow up with Nate by email but it went ahead and did it anyways here we go in our emails we can see Team sync rescheduled dear Nate herkelman um I'm writing to confirm that the team Sync has been rescheduled to 7:00 p.m. tonight anyways let’s take a look at our inbox we can see we have a new email from Nate herkelman checking in how are you let's say that we want to respond to this email in that same thread all we have to do is ask our ultimate assistant to do so for us please respond to my email from Nate herkelman saying that I'm doing well okay that's going to get sent off once again it’s going to grab that information it's going to hit the email agent and then we're going to take a look at what actually happens within the email agent to reply to this message we just got our message back I've replied to the email with I'm doing well so let’s quickly refresh our Gmail we can see that in this thread we have now I'm doing well signed off by Nate and now we’re going to go into the email agent and check that execution to see what actually happened so here's that execution of the email agent as you can see it hit the tool called email reply which is awesome because it's going to put it in the same thread but what we see here is that we need to get a message ID and this isn't something that we’d be able to get by ourselves without getting all of the email information so what the email agent has to do is first of all grab emails from Nate herkelman as you can see it pulls in the sender which is upad digital gmail.com and then it's able to look through the emails that we’re talking about grab that message ID and then plug it into the email reply tool so that’s how it actually replied in that same thread so this type of logic is really cool and I want to show an example of doing labeling emails because in the label email tool what we need is a message ID but we also need a label ID so in order for the agent to actually label emails it’s going to have to get all emails get all labels so that it has IDs for labels and messages to feed into this tool so let's do an example of that please label my recent email from Nate herkelman as high priority there we go it's hitting the email agent and then we'll take a look at the execution and see how that worked so we got our message the recent email from Nate hman has been labeled as high priority let’s refresh our Gmail we can see right here this is the one we talking about it just got moved to high priority and here we have the most recent execution of the email agent as you can see what it had to do to fill in the parameters for label ID it had to get message ID and label ID and it got this by activating the get email tool to get the message ID and then get the labels for the label ID super cool stuff okay let's try out some other functionality can you please create a blog about deep seek and then put it in a draft for Nate herkelman okay this is going to send it off to the content creator agent which has um a workflow in there where it’s able to search the internet grab back articles and then it’s going to use that information to create a blog and then what it’s going to do is hit the contact agent to get Nate Herman’s contact information once again and then it's going to hit the email agent to draft that email for him and by the way in the ultimate assistant I'm using GPT 40 and all of these agents I'm using GPT 40 except for the content creator agent I'm using Claude 3.5 Sonet because I really like the way that it's able to structure content human readable HTML whatever it is I like the way that it retrieves content for us okay here we go the blog about deep seek has been created and included in a draft email for Nate herkelman so let's take a look at the draft real quick okay we’re in my draft as you can see it’s right here if we pull it up it’s in a HTML format let’s actually make this bigger real quick and take a look at it so deep seek Revolution AI with breakthrough technology and Energy Efficiency we’ve got different headers here we’ve got bullet points we’ve got benefits potential applications challenges and concerns and then we’ve also got sources at the bottom which is just really cool for a really quick agent to throw that together okay one last demo then really dive into this build let's say can you please get my calendar availability for today and then send that in an email to Nate herkelman there we go hitting the calendar agent right now it’s getting availability as you can see we only have three meetings today so this is what we should get pulled back um as our sort of unavailable slots and then hopefully it’s going to take that information get contact information for Nate herkelman and then send an email to them with our availability okay there we go the email with your calendar availability for today has been sent to Nate herkelman let's take a look at it so here’s what the email looks like dear Nate here’s my calendar availability for today 12:00 to1 I’m busy with a meeting with you 7 to8 team sync 8 to9 strategy meeting and then it provides links to all those events It also says I'm free before 1200 between 1 and 7 and after 9: so that’s pretty cool too okay so before we start breaking down this ultimate assistant with all the other agents that we built if you want to download this workflow as well as the email agent the calendar agent the content creator agent and the contact agent you can do so by joining my free school Community the link for that is down in the description you’ll go to YouTube resources click on the post associated with this video and then you see right here you can download those Json files to load straight into your nnn environment and if you’re looking to take your skills with naden a little farther and you’re looking for more Hands-On approach please feel free to check out my paid Community the link for that is also down in the description we’ve got a great community of members who are always sharing resources about nadn um sharing builds sharing challenges they’re having we also got a great classroom section with resources that are always being updated right now we’re focusing on a deep dive within building AI agents but there are other Deep dive topics like vector databases and finally we have a calendar section with five live calls per week to make sure you’re always getting your questions answered never getting stuck and also being able to network with other like-minded individuals in this community so I’d love to see you guys in here let’s get back to the video okay there’s a lot going on in this build so let’s Dive Right In and I'll try to break everything down as simple as I can so let’s first of all just start with the inputs and the outputs we're working with telegram so we have a telegram trigger set up that’s watching for our messages when it comes through it’s either going to come through as a text file or a voice file so if it comes through as voice what we’re doing is we’re using this switch to see if the voice file exists if it does it’s going to send it up this way to download the file in telegram transcribe that file and then it feeds it into the ultimate assistant if it comes through as text which actually let me show you guys that real quick so I'm saying search the web for puppies we sent that over as a text so as you can see it’s going to go down this route because right in here we’re seeing if um the json. message. text exists rather than the voice file so anyways they both feed through into the agent and it’s going to work all the same real quick let’s see what we got here are some interesting stories about puppies so the Puppy Bowl it’s going to give us a link to read more um pause Chicago pet of the week Kirby it’s going to give us a link to watch the video and um then finally we have one more video that we can click on the link to watch and that’s how that search functionality works but what we’re doing here is we’re setting them both to equal a field called text so as you can see through here we’re mapping this to text so that it’s going to feed through so that the agent can just be looking for a field called json. text and now I'm in an execution where we used our voice and as you can see what’s leaving the transcribe node is a field called text so once again the ultimate assistance now I’m in an execution where we trigger this workflow with our voice as you can see coming out of the transcribe node is a field called text so we’re able to feed in the agent json. text and it’s able to understand what we’re saying whether it’s voice or text and then as far as the output all it’s happening here is we’re responding in that same telegram chat ID so we’re grabbing the chat ID that’s coming in from the trigger and then we’re just outputting exactly what the ultimate assistant output to us okay cool so from there let’s take a look at the ultimate assistant prompt so we all understand what is going on now what I think is really really cool about this ultimate assistant framework is that as you can see this prompt is not very long or not very complex and similarly with all the other agents the prompts are not very long and not very complex so this is really cool because every agent sort of specializes in something rather than loading up one agent with a ton of tools and a huge prompt so in this case the ultimate assistant is just in charge of delegating tasks as we said your job is to send the user’s query to the correct tool you should never be writing emails or creating event summaries all you need to do is just call the correct tool so that makes it really easy for this guy then we Define what the tools are so email agent use it for email actions calendar agent use it for calendar actions contact agent content creator and then Tav for web search we did have to give it a rule which is pretty important so we said some actions require you to look up contact information first so for the following actions you need to get contact information and then you send that to the agent who needs the contact information so in this case if you’re looking to send emails draft emails or create calendar events with attendees you need to get contact information first and then I was able to get away with having this agent perform pretty well with only giving one example which is here’s an input send an email to Nate herkelman asking what time he wants to leave first action is you use the contact agent to get Nate Herman’s email then you use the email agent to send the email and you’ll pass the tool a query like send Nate herkelman an email to ask what time he wants to leave so all we’re doing is getting the email agent an actual query rather than sending trying to write an email and send that over and then finally we just gave it access to the current date and time okay so how are we actually able to give the ultimate assistant access to those workflows that we bu built out like the email agent and the calendar agent what we need to do is we add them as tools so we can click on the plus under the tool section and we’re going to click on call NN workflow as a tool so when we click on this we have a couple things to set up the first thing is we actually need to give it a name and this is the name that the AI agent will be looking for when you define them in the system prompt so in here as you can see I said these are the tools you have email agent calendar agent and those are all in camel case and as you can see here those aren’t camel case but in here I actually Define the name in camel case so that’s what the agents look for anyways once you’re in this tool what you need to do is give it a name so this is just an example you need to give it a description so let’s say this was the email agent what we would say is call this tool for email actions right um so email actions is there and then what we’re doing is we’re just going to grab it from our database you could also do it by Json we don’t want to do that we’re just going to do it by database and then it’s going to basically just be a drop down list for us to choose from so in this case um you know that’s why I was pulling in the email agent or we were pulling in the calendar agent right here so that’s pretty much how it works and then you may be wondering okay so the ultimate assistant calls this tool great then the tool goes through the process of taking action whatever it needs to do and then it has to respond back to the main agent so the main agent actually knows what’s going on and so there used to be a parameter here called um field to return and then we’d always it was by default called response so that’s why um out of habit I always set my last node as a set node to response I don’t think you have to call it response anymore because right here it says the tool will call the workflow you define below and it will look in the last node for the response the workflow needs to start with an execute workflow trigger so um this email agent that we’re calling it’s starting with an execute workflow trigger the query comes over the email agent decides what to do and then the email agent outputs a response which is either you know hey the email got sent to Nate herkelman saying all this kind of stuff or the email agent failed and then we output this response that says um you know unable to perform the task please try again and this introduces a really cool element of the agents being able to talk to each other more than just here’s a query here’s my output but also like hey I’m having issues try again so that’s what’s going on as far as like data transferring between different workflows so this is really cool because rather than having all the email Tools in this workflow and all the calendar Tools in this workflow all it has to do is just send it off once and then this email agent is able to figure out with the incoming query what it needs to do so if we click into an execution here we’ll look at one of the examp examples we just did in the demo so let’s click into this one that took 30 seconds to run because it was probably a little bit more of a complex query all this this agent is getting is um create a draft for Nate herkelman at upit digital.com and it gives us a subject and then it gives us the actual blog that we needed to send over and here’s that example again where we asked it to label one of our emails the query that it got was label the recent email from Nate herkelman as high priority so what it had to do was understand which tools to use so let’s look at the email agents prompt so as you can see this prompt is super short and it’s just super concise super clear which is awesome because it really allows us to add on more tools and to the ultimate assistant continue to add on more and more agents because right now it’s not overwhelmed with what it’s doing so the overview is you’re an email management assistant all emails must be formatted professionally in HTML and signed off as Nate so here are the tools that you have access to send email to send emails create drafts get emails get labels so those are all pretty intuitive because the name of the tool pretty much says what the tool does but then we have a couple that we had to give more instructions to so use Mark unread to mark an email is unread but you must use get emails first so you have the message ID of the email to flag as unread similarly with labeling emails you need to use get emails first so you have the message ID of the email to flag then you have to use get labels so you have the label ID and finally with email reply same thing get emails first so that you have the message ID to put into the the tool um reply to emails so first things first the email agent is being triggered when it’s called by another workflow so as we saw in the demo in the visual with the green um spinny things um when the ultimate assistant decides to send a query it’s going to hit the email agent and then it sends something over and then right here is where that email agent actually captures that query and then what we’re doing here is we’re basically having two options for output the first one is if success we’re going to return the output of the main agent back to the ultimate assistant so by by setting this field to response it’s going to be looking for json. output and so some of you guys i’ I’ve seen have been there have been questions about this but basically when you’re setting up workflow as a tool you can see that it says the tool will call the workflow you def find below and it will look in the last node for the response so whatever node you have at the end of your workflow that’s where the main agent that you called originally is going to be looking over here so we have success and we have try again we were able to set this up by coming into the agent clicking on settings and then using on error continue using error output so this so what this did is it broke up two branches so if there’s an error in the email agent it’s going to come over here and it’s going to send back unable to perform task please try again and then the ultimate personal assistant will read this and likely send over a new query to try the process again so we’re going to dive into these different tools down here and how they actually work um for the email one but then pretty much they’re all going to be using that same sort of from AI framework that I’m about to dive into so we won’t break all of them down as in detail but let’s take a look at these tools here so first thing that I’m going to do is I’m going to come into our node which is one executed by another workflow and we’re going to enter in a query here so that we can just test this environment easier rather than than having to have the ultimate assistant send over a query every time so in here I’m I’m typing out send an email to Nate herk 88@gmail.com asking what’s up and what his favorite color is okay so that’s the query that this agent’s going to be getting right so we have this set um and this is similar to a query that the ultimate assistant would actually be passing over to us so we’ll hit play so the email agent starts thinking about it using its prompt to understand what tools it needs to hit we know that all it needs to do really is hit the send email tool as you can see it didn’t activate any of the other ones but you may be thinking how does it know how to actually do that so in this tool and for all the other tools like I mentioned we’re going to be using a function called from AI so as you can see right here use the Expression from AI for any data to be filled in by the model so this is really really cool because Within These different parameters like who the email is going to what the subject is what the message is we can basically just tell the AI to fill this in by itself based on a few like a key and a definition and in this case we’re not even using a definition we’re just using a key so as you can see here um in the two field we put from Ai and we told AI that you’re looking for an email address so based on the queer that was coming in it was able to to define the email address as Nate herk similarly for this second part where we were doing from AI subject it was able to make a subject based on the query which is what’s up and then down here as you can see the email body is it’s an HTML so it looks a little weird here but it’s saying hi Nate I hope you’re doing well I was wondering what’s up with you these days also I’m curious to know what’s your favorite color looking forward to your reply so that’s how the from AI function can really really speed up the process of creating these agents giving them tools hooking them up really easily because we don’t have to go through different logic to actually pull out from a query what is the two what is the subject what’s the message we can put it right in here and the AI is going to do all that for us and I just absolutely love this function okay setting a new query in here mark my email from Nate herkelman as unread there there's the query let’s send that over and we’ll see what happens and then we’ll take a look at what’s going on Within These tools so if you remember it has to get emails first because in the mark unread tool it’s asking for a message ID of which one we need to go in there and Mark is unread so first thing it needs to do is go into get emails we’re looking for sender of Nate herkelman and in this this thing we can say a sender is either the name that comes through in Gmail or it’s the actual email address so in this case Nate herkelman works it could have also been up at digital gmail.com and it would have worked the same anyways we’re grabbing one email from Nate herkelman which is the most recent one and then we’re grabbing that message ID which is right here and then in the mark unread tool all we have to do is say hey you’re going to be looking for the response and then you’re going to be looking for a message ID which it grabs right here and so as you can see it went ahead and marked this one as unread this one is marked as un red but it’s just the one that we just sent to ourselves where we said you know um what’s your favorite color but this is the one that we previously had clicked on in the demo we made it high priority but now it just marked it as unread so the tool worked so exact same thing with the calendar agent it’s being triggered by the personal assistant it has access to these five tools and then we’re responding with either success or try again or success is the output of the calendar agent and then try again is just basically saying an error has occurred please try again once again The Prompt for this guy is super super simple which is just awesome your calendar assistant your responsibilities include creating getting and deleting events so then we Define the tools create event with an attendee when an event includes a participant create event for solo events get events to fetch events and then for delete and update we needed it to get Events first so that it could get the ID of the event to delete and then finally we gave it today’s current date and time and then we said if a duration for an event isn’t specified just assume that it’s going to be 1 hour long so um if you’re curious why there’s one for create event and one for create an event with attendee it’s because there’s a parameter in here called attendees so in here we don't have that filled out but in this one we do and so if you were to try to create an event in this node with no attendee and you left this blank the request just wouldn’t go through so that’s why we have two different ones and we just have to specify okay if you want to have an event with someone invited then you’re going to use this one otherwise you’ll just use the basic create event function and so pretty similar logic with like deleting an updating event as the same thing with our um replying to emails and labeling emails and the other agent because you have to get the ID of the event to actually update it or delete it so we’re going to do a quick example we’re just going to ask it to delete an event so we’ll come in here hit test workflow so our telegram trigger is listening for us and then we’re going to say could you please delete the team sync tonight at 700 p.m. so we’ll send that off it should be hitting the calendar agent and then it’s going to grab that event get the ID and then it’s going to delete it we can watch this happen probably in real time right down here Boom the team sync was just deleted and then the agent responded team Sync has been cancelled so that’s how that works okay so now let’s take a look at our contact agent this one’s a lot simpler it just has the option to get contacts or add or update contacts the assistant prompt for this guy is your contact management assistant your responsibilities include looking up contacts adding new ones or updating them and then we Define the tools um as you can see retrieve contacts or add or update so let’s do an example of this real quick so telegram’s listening for us and I’m not going to just have it get contacts because it’s been doing that for all the demos what we’re going to do is we’re going to change Michael Scott’s email so can you please change Michael Scott’s email to Michael dundermifflin.com send that off it’s going to go to the contact agent of course and then we should see an air table right over here Michael Scott’s emailed boom it just got popped and changed to Michael dundermifflin.com rather than Michael Scott dundermifflin.com so that’s how you can really quickly update contacts and then obviously pull them back using that that contact agent and then the final agent of course is the content creator agent so let’s pop into this system prompt here all we were saying is you are a skilled AI blog writer specializing in engaging well structured informative content you have one tool which is tavali and you’re just going to use this to search the web about the requested topic for the blog post um and then we just gave it some blog requirements like formatting it as HTML we told to keep the links that it’s getting from tavali so that the users can click into the links in the actual blog if they want to and obviously right now the use case has been write a blog and then um send it as an email but obviously you could hook this up to different social medias if you wanted to sort of automate that process or since you know we’ve already seen that integration with air table or some other sort of database you could um just be pushing content constantly into a database that you could then go manually post if you want or use that to plug into something else so real quick I’m going to load up an execution of the one that we had this agent WR for NVIDIA as you can see it went to tavali which is the tool and what we did here is we’re sending over a request to tavali a post request in this Json body what we’re doing is we’re able to use a placeholder for any data that the model needs to fill in so similar to the from AI function except for rather than doing a from function we’re just putting in a placeholder so right here you can see the placeholder for the query that we’re searching tabl for is search term and that has two curly braces around it and then down here we’re defining the placeholder name is search term the description is what the user has requested to write a blog about and that is a string variable type so when this request actually gets sent over to tavali in the body parameters they’re filling in search term with probably Nvidia or actually sorry not Nvidia deep seek because that’s the one that we asked it to write about so search term deep seek AI features benefits applications in modern technology sectors so these placeholders are working exactly the same as the from AI functions so while I was editing this video I realized that I never actually formally signed off the video I just kind of stopped recording so this is me signing off um that’s going to be it for this one thanks guys so much for watching if you enjoy this one if you liked it then please drop me a like definitely helps me out a lot and let me know in the comments what else you want to see but as always appreciate you guys making it to the end of this one I’ll see you guys in the next video thanks"
            },
            "refusal": null,
            "annotations": []
          },
          "logprobs": null,
          "finish_reason": "stop"
        }
      }
    ]
  },
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Text Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier": {
      "main": [
        [
          {
            "node": "LinkedIn Scraper",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "YouTube Scraper",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Instagram Reel Scraper",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "X Scraper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Update IG Sheet Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Download IG Reel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram Reel Scraper": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "Find IG Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Add Records to IG Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Update YT Sheet Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Generate Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Add Records to YT Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Scraper": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          },
          {
            "node": "Find YT Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "X Scraper": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          },
          {
            "node": "Find X Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Add Records to X Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn Scraper": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          },
          {
            "node": "Find LI Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Add Records to LI Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find LI Rows": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find YT Rows": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find IG Rows": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find X Rows": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger: Row Added (IG Sheet)": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger: Row Added (YT Sheet)": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download IG Reel": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update IG Sheet Transcript": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update YT Sheet Transcript": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Transcript": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Records to LI Sheet": {
      "main": [
        []
      ]
    },
    "Add Records to X Sheet": {
      "main": [
        []
      ]
    },
    "Add Records to IG Sheet": {
      "main": [
        []
      ]
    },
    "Add Records to YT Sheet": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "143742f3-c120-41f5-9f1e-27c2be0697ee",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9da288905fbe9354dea4b543fd7e960ac33b487ac1b02440ad591d7c90022103"
  },
  "id": "g9xhh6xRee2BauCH",
  "tags": []
}